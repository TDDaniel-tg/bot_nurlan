#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from pathlib import Path
import hashlib
from flask import Flask
import threading

# –ò–º–ø–æ—Ä—Ç—ã Telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ò–º–ø–æ—Ä—Ç PDF –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
from pdf_processor import PDFProcessor

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
BOT_TOKEN = os.getenv('BOT_TOKEN')
CLAUDE_API_KEY = os.getenv('CLAUDE_API_KEY')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

if not CLAUDE_API_KEY:
    logger.warning("CLAUDE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. OCR —á–µ—Ä–µ–∑ Claude API –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

class DocumentBot:
    def __init__(self):
        self.pdf_processor = PDFProcessor()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

ü§ñ –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏.

üìã **–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF
‚Ä¢ üî¢ –ü–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü
‚Ä¢ üìä –≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü –≤ Excel
‚Ä¢ üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

üìù **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª
2. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
3. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

üÜò –ö–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–º–æ—â—å
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        """
        
        keyboard = [
            [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="help")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """ü§ñ **PDF –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ë–æ—Ç - –ü–æ–º–æ—â—å**

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:**
üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
üìä –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏ —ç–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü –≤ Excel
üì∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (OCR)
üîÑ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ PDF

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã PDF:**
‚Ä¢ **–¢–µ–∫—Å—Ç–æ–≤—ã–µ PDF** - –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –≤—ã–¥–µ–ª—è–µ–º—ã–º —Ç–µ–∫—Å—Ç–æ–º
‚Ä¢ **–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ PDF** - –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
‚Ä¢ **–°–º–µ—à–∞–Ω–Ω—ã–µ PDF** - —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –∏ —Ç–µ–∫—Å—Ç, –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –±–æ—Ç—É
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –ü–æ–ª—É—á–∏—Ç–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
4. –ü—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç–∞–±–ª–∏—Ü - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤ Excel

**–§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:**
‚Ä¢ **Claude AI** - –≤—ã—Å–æ–∫–æ—Ç–æ—á–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ —Ç–∞–±–ª–∏—Ü
‚Ä¢ **Tesseract OCR** - –±–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥)

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:**
‚Ä¢ –†—É—Å—Å–∫–∏–π
‚Ä¢ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
‚Ä¢ –°–º–µ—à–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã

**–§–æ—Ä–º–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞:**
üìä Excel (.xlsx) - –¥–ª—è —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
üìÑ –¢–µ–∫—Å—Ç - –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20 –ú–ë
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ 5 –º–∏–Ω—É—Ç
‚Ä¢ –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–µ–º PDF –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""

        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(help_text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(help_text, reply_markup=reply_markup)

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**

‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}
üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}

üîß **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
‚Ä¢ Python –≤–µ—Ä—Å–∏—è: 3.13
‚Ä¢ Telegram Bot API: {context.bot.api_version if hasattr(context.bot, 'api_version') else 'N/A'}
‚Ä¢ PDF –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –∞–∫—Ç–∏–≤–µ–Ω

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(context.user_data) // 2}
        """
        await update.message.reply_text(status_text)

    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            document = update.message.document
            
            if not document.file_name.lower().endswith('.pdf'):
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = await update.message.reply_text("üìÑ –ü–æ–ª—É—á–µ–Ω PDF —Ñ–∞–π–ª. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(document.file_id)
            file_path = f"downloads/{document.file_name}"
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É downloads –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs("downloads", exist_ok=True)
            
            await file.download_to_drive(file_path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await processing_message.edit_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º PDF
            pdf_processor = PDFProcessor()
            result = pdf_processor.process_pdf(file_path)
            
            if result['success']:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                method_info = ""
                if "OCR" in result.get('method', ''):
                    if "Claude API" in result.get('method', ''):
                        method_info = "üì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ Claude AI."
                    else:
                        method_info = "üì∏ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ OCR —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ."
                else:
                    method_info = "üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π PDF –¥–æ–∫—É–º–µ–Ω—Ç."
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response_text = f"""‚úÖ PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!

{method_info}

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –°—Ç—Ä–∞–Ω–∏—Ü: {result['pages']}
‚Ä¢ –°–∏–º–≤–æ–ª–æ–≤ —Ç–µ–∫—Å—Ç–∞: {len(result['text']) if result['text'] else 0}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö: {len(result.get('tables', []))}

üìÑ **–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**
{result['text'][:2000]}{'...' if len(result['text']) > 2000 else ''}"""
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è callback
                short_id = hashlib.md5(document.file_id.encode()).hexdigest()[:8]
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = []
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                tables_count = len(result.get('tables', []))
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {tables_count}")
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü)
                keyboard.append([InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data=f"excel_{short_id}")])
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                if len(result['text']) > 2000:
                    keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data=f"text_{short_id}")])
                
                # –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏
                keyboard.append([InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")])
                
                reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                await processing_message.edit_text(response_text, reply_markup=reply_markup)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º ID
                context.user_data[f'pdf_result_{short_id}'] = result
                context.user_data[f'pdf_path_{short_id}'] = file_path
                context.user_data[f'pdf_filename_{short_id}'] = document.file_name or f"document_{short_id}.pdf"
                
            else:
                error_msg = f"""‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF

**–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:** {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}

**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**
‚Ä¢ PDF —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º
‚Ä¢ –§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ OCR)
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ñ–∞–π–ª—É

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PDF –Ω–µ –∑–∞—â–∏—â–µ–Ω –ø–∞—Ä–æ–ª–µ–º
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π PDF —Ñ–∞–π–ª
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è"""
                
                keyboard = [[InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await processing_message.edit_text(error_msg, reply_markup=reply_markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        
        finally:
            # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–Ω–æ –Ω–µ —Å—Ä–∞–∑—É, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞)
            if 'file_path' in locals():
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
                context.job_queue.run_once(
                    lambda context: self.cleanup_file(file_path),
                    30 * 60,  # 30 –º–∏–Ω—É—Ç
                    name=f"cleanup_{document.file_id}"
                )

    def cleanup_file(self, file_path: str):
        """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
                logger.info(f"–£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = update.effective_user.id
        
        if data == "help":
            await self.help_command(update, context)
            
        elif data == "stats":
            await self.status_command(update, context)
            
        elif data.startswith("text_"):
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            short_id = data.replace("text_", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            result_key = f'pdf_result_{short_id}'
            if result_key not in context.user_data:
                await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏.")
                return
                
            result = context.user_data[result_key]
            text = result['text']
            filename = context.user_data.get(f'pdf_filename_{short_id}', 'document.pdf')
            
            if len(text) > 4000:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Ñ–∞–π–ª–æ–º
                await query.edit_message_text("üìÑ –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º...")
                
                txt_file = f"text_{user_id}_{short_id}.txt"
                with open(txt_file, 'w', encoding='utf-8') as f:
                    f.write(text)
                
                with open(txt_file, 'rb') as f:
                    await context.bot.send_document(
                        chat_id=query.message.chat_id,
                        document=f,
                        filename=f"{filename}_extracted.txt",
                        caption="üíæ –ü–æ–ª–Ω—ã–π –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ PDF"
                    )
                
                os.remove(txt_file)
                await query.edit_message_text("‚úÖ –§–∞–π–ª —Å –ø–æ–ª–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            else:
                await query.edit_message_text(f"üìÑ **–ü–æ–ª–Ω—ã–π –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**\n\n{text}")
                
        elif data.startswith("excel_"):
            # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
            short_id = data.replace("excel_", "")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
            result_key = f'pdf_result_{short_id}'
            path_key = f'pdf_path_{short_id}'
            if result_key not in context.user_data or path_key not in context.user_data:
                await query.edit_message_text("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏.")
                return
                
            await query.edit_message_text("üîÑ –°–æ–∑–¥–∞—é Excel —Ñ–∞–π–ª...")
            
            try:
                result = context.user_data[result_key]
                file_path = context.user_data[path_key]
                filename = context.user_data.get(f'pdf_filename_{short_id}', 'document.pdf')
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ OCR –µ—Å–ª–∏ –µ—Å—Ç—å
                table_data = result.get('tables', [])
                ocr_tables_count = len(table_data)
                logger.info(f"–¢–∞–±–ª–∏—Ü –∏–∑ OCR: {ocr_tables_count}")
                
                # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü –Ω–µ—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ OCR, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –º–µ—Ç–æ–¥–æ–º
                if not table_data:
                    logger.info("–ü—Ä–æ–±—É—é –∏–∑–≤–ª–µ—á—å —Ç–∞–±–ª–∏—Ü—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –º–µ—Ç–æ–¥–æ–º...")
                    table_data = await asyncio.to_thread(
                        self.pdf_processor.extract_table_from_pdf, 
                        file_path
                    )
                    standard_tables_count = len(table_data) if table_data else 0
                    logger.info(f"–¢–∞–±–ª–∏—Ü —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –º–µ—Ç–æ–¥–æ–º: {standard_tables_count}")
                
                if not table_data:
                    # –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                    logger.info("–ü—Ä–æ–±—É—é –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞...")
                    text_data = await asyncio.to_thread(
                        self.pdf_processor._extract_from_text,
                        result.get('text', '')
                    )
                    if text_data:
                        table_data = text_data
                        logger.info(f"–î–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞: {len(table_data)}")
                
                if not table_data:
                    await query.edit_message_text(
                        "‚ùå –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ PDF.\n\n"
                        "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                        "‚Ä¢ PDF —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–∞–±–ª–∏—Ü\n" 
                        "‚Ä¢ –¢–∞–±–ª–∏—Ü—ã –≤ —Å–ª–æ–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n"
                        "‚Ä¢ –ù–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
                        f"üìä –ü–æ–ø—ã—Ç–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:\n"
                        f"‚Ä¢ OCR —Ç–∞–±–ª–∏—Ü—ã: {ocr_tables_count}\n"
                        f"‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {len(table_data) if 'standard_tables_count' in locals() else 0}\n"
                        f"‚Ä¢ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ"
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
                excel_filename = f"excel_{user_id}_{short_id}.xlsx"
                await asyncio.to_thread(
                    self.pdf_processor.create_excel_from_data,
                    table_data,
                    excel_filename
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
                with open(excel_filename, 'rb') as f:
                    await context.bot.send_document(
                        chat_id=query.message.chat_id,
                        document=f,
                        filename=f"{filename.replace('.pdf', '')}_extracted.xlsx",
                        caption=f"üìä Excel —Ñ–∞–π–ª –≥–æ—Ç–æ–≤!\n\n"
                               f"üìù –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(table_data)}\n"
                               f"üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {filename}"
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                os.remove(excel_filename)
                
                await query.edit_message_text("‚úÖ Excel —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel: {e}")
                await query.edit_message_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel:\n{str(e)}\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ."
                )

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        error_message = str(context.error)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        if "Conflict: terminated by other getUpdates request" in error_message:
            logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    if not BOT_TOKEN:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
    bot = DocumentBot()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    app = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    app.add_handler(CommandHandler("start", bot.start))
    app.add_handler(CommandHandler("help", bot.help_command))
    app.add_handler(CommandHandler("status", bot.status_command))
    app.add_handler(MessageHandler(filters.Document.PDF, bot.handle_document))
    app.add_handler(CallbackQueryHandler(bot.handle_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(bot.error_handler)
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    try:
        app.run_polling(
            drop_pending_updates=True,  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            close_loop=False
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        print("üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥")

app = Flask(__name__)

@app.route("/")
def healthcheck():
    return "OK", 200

def run_flask():
    import os
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫ Flask healthcheck –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_flask, daemon=True).start()
    main() 
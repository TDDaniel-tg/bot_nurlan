import os
import base64
import logging
import io
from typing import List, Dict, Optional
import cv2
import numpy as np
from PIL import Image, ImageEnhance, ImageFilter
from pdf2image import convert_from_path
import anthropic
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É poppler
POPPLER_PATH = os.path.join(os.path.dirname(__file__), "poppler", "poppler-24.08.0", "Library", "bin")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –º—ã –∑–∞–ø—É—â–µ–Ω—ã - –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
if os.path.exists(POPPLER_PATH):
    # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ Windows
    USE_POPPLER_PATH = POPPLER_PATH
else:
    # –ù–∞ —Å–µ—Ä–≤–µ—Ä–µ (Railway/Linux) - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π poppler
    USE_POPPLER_PATH = None  # None –æ–∑–Ω–∞—á–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—É—Ç—å

class ImageProcessor:
    def __init__(self):
        self.claude_client = None
        self.tesseract_available = False
        self.setup_claude()
        self.setup_tesseract()
    
    def setup_claude(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Claude API"""
        claude_api_key = os.getenv('CLAUDE_API_KEY')
        if claude_api_key and claude_api_key != 'your_claude_api_key_here':
            try:
                self.claude_client = anthropic.Anthropic(api_key=claude_api_key)
                logger.info("Claude API –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Claude API: {e}")
        else:
            logger.warning("CLAUDE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    def setup_tesseract(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tesseract OCR"""
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å pytesseract
            import pytesseract
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Tesseract
            pytesseract.get_tesseract_version()
            self.tesseract_available = True
            logger.info("Tesseract OCR –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            self.tesseract_available = False
            logger.warning(f"Tesseract –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def is_scanned_pdf(self, pdf_path: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ PDF —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if USE_POPPLER_PATH:
                images = convert_from_path(pdf_path, first_page=1, last_page=1, dpi=150, poppler_path=USE_POPPLER_PATH)
            else:
                images = convert_from_path(pdf_path, first_page=1, last_page=1, dpi=150)
            
            if not images:
                return False
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_array = np.array(images[0])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ü–≤–µ—Ç–æ–≤ (—Å–∫–∞–Ω—ã –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –º–Ω–æ–≥–æ –≥—Ä–∞–¥–∞—Ü–∏–π)
            unique_colors = len(np.unique(img_array.reshape(-1, img_array.shape[-1]), axis=0))
            
            # –ï—Å–ª–∏ –º–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤, –≤–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ —Å–∫–∞–Ω
            return unique_colors > 1000
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ PDF: {e}")
            return False
    
    def enhance_image(self, image: Image.Image) -> Image.Image:
        """
        –£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ OCR
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
            enhancer = ImageEnhance.Contrast(image)
            image = enhancer.enhance(1.5)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å
            enhancer = ImageEnhance.Sharpness(image)
            image = enhancer.enhance(2.0)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à—É–º–∞
            image = image.filter(ImageFilter.MedianFilter())
            
            return image
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return image
    
    def extract_text_with_tesseract(self, image: Image.Image) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Tesseract OCR
        """
        if not self.tesseract_available:
            return ""
            
        try:
            import pytesseract
            
            # –£–ª—É—á—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            enhanced_image = self.enhance_image(image)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Tesseract –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            custom_config = r'--oem 3 --psm 6 -l rus+eng'
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
            text = pytesseract.image_to_string(enhanced_image, config=custom_config)
            
            return text.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Tesseract OCR: {e}")
            return ""
    
    def extract_text_with_claude(self, image: Image.Image) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Claude API
        """
        if not self.claude_client:
            return ""
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            buffer = io.BytesIO()
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode not in ['RGB', 'RGBA']:
                image = image.convert('RGB')
            image.save(buffer, format='PNG')
            image_data = base64.b64encode(buffer.getvalue()).decode('utf-8')
            
            # –ó–∞–ø—Ä–æ—Å –∫ Claude 4 Sonnet —Å–æ streaming
            with self.claude_client.messages.stream(
                model="claude-sonnet-4-20250514",
                max_tokens=64000,
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "image",
                                "source": {
                                    "type": "base64",
                                    "media_type": "image/png",
                                    "data": image_data
                                }
                            },
                            {
                                "type": "text",
                                "text": """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF –∏ –∏–∑–≤–ª–µ–∫–∏ –í–ï–°–¨ —Ç–µ–∫—Å—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
üîí –ò–ú–ï–ù–ê –ò –ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï:
- –°–æ—Ö—Ä–∞–Ω—è–π –≤—Å–µ –∏–º–µ–Ω–∞, —Ñ–∞–º–∏–ª–∏–∏, –æ—Ç—á–µ—Å—Ç–≤–∞ –¢–û–ß–ù–û –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω–æ
- –ù–ï –∏—Å–ø—Ä–∞–≤–ª—è–π –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é –≤ –∏–º–µ–Ω–∞—Ö
- –ù–ï –ø–µ—Ä–µ–≤–æ–¥–∏ –∏–º–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏
- –°–æ—Ö—Ä–∞–Ω—è–π –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, —Ç–æ—á–∫–∏ –≤ –∏–º–µ–Ω–∞—Ö

üìã –ü–û–õ–ù–û–¢–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø:
- –ò–∑–≤–ª–µ–∫–∞–π –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –í–∫–ª—é—á–∞–π –∑–∞–≥–æ–ª–æ–≤–∫–∏, –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏, –Ω–æ–º–µ—Ä–∞, –∫–æ–¥—ã
- –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –º–µ–ª–∫–∏–π —Ç–µ–∫—Å—Ç, —Å–Ω–æ—Å–∫–∏, –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
- –ò–∑–≤–ª–µ–∫–∞–π –≤—Å–µ —á–∏—Å–ª–∞, –¥–∞—Ç—ã, –∞–¥—Ä–µ—Å–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é

üìä –°–¢–†–£–ö–¢–£–†–ê:
- –°–æ—Ö—Ä–∞–Ω—è–π –∏—Å—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
- –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã - –ø–µ—Ä–µ–¥–∞–≤–∞–π –∏—Ö —Ç–æ—á–Ω–æ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
- –°–æ—Ö—Ä–∞–Ω—è–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
- –û–±–æ–∑–Ω–∞—á–∞–π —Ä–∞–∑–¥–µ–ª—ã –∏ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö

üéØ –ö–ê–ß–ï–°–¢–í–û:
- –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤ - –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π
- –ü—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ - –≤—ã–±–∏—Ä–∞–π –≤–∞—Ä–∏–∞–Ω—Ç –±–ª–∏–∂–µ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É
- –ù–µ –¥–æ–±–∞–≤–ª—è–π –ø–æ—è—Å–Ω–µ–Ω–∏—è –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
- –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º

–ò–∑–≤–ª–µ–∫–∏ –í–ï–°–¨ —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:"""
                            }
                        ]
                    }
                ],
                temperature=0
            ) as stream:
                text_result = ""
                for text in stream.text_stream:
                    text_result += text
                
                return text_result.strip()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ Claude API: {e}")
            return ""
    
    def extract_tables_with_claude(self, image: Image.Image) -> List[Dict]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Claude API
        """
        if not self.claude_client:
            return []
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            buffer = io.BytesIO()
            if image.mode not in ['RGB', 'RGBA']:
                image = image.convert('RGB')
            image.save(buffer, format='PNG')
            image_data = base64.b64encode(buffer.getvalue()).decode('utf-8')
            
            # –ó–∞–ø—Ä–æ—Å –∫ Claude 4 Sonnet –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Å–æ streaming
            with self.claude_client.messages.stream(
                model="claude-sonnet-4-20250514",
                max_tokens=64000,
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "image",
                                "source": {
                                    "type": "base64",
                                    "media_type": "image/png", 
                                    "data": image_data
                                }
                            },
                            {
                                "type": "text",
                                "text": """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–∞–Ω–Ω—ã—Ö, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ–∫–∏ –í–°–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–æ–ª–Ω–æ—Ç–æ–π.

üîç –ê–ù–ê–õ–ò–ó –î–û–ö–£–ú–ï–ù–¢–ê:
–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∏ –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—è –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏.

üìã –î–õ–Ø –î–û–ö–£–ú–ï–ù–¢–û–í –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ô (–∫–∞—Ä—Ç—ã –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤, —Å–ø—Ä–∞–≤–∫–∏, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã):
–î–ª—è –ö–ê–ñ–î–û–ô –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏/—É—á—Ä–µ–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–π –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç:
- organization_name: –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (—Å–æ –≤—Å–µ–º–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è–º–∏ –∏ —Å–∏–º–≤–æ–ª–∞–º–∏)
- inn: –ò–ù–ù (–≤—Å–µ —Ü–∏—Ñ—Ä—ã —Ç–æ—á–Ω–æ)
- kpp: –ö–ü–ü (–≤—Å–µ —Ü–∏—Ñ—Ä—ã —Ç–æ—á–Ω–æ)
- ogrn: –û–ì–†–ù (–µ—Å–ª–∏ –µ—Å—Ç—å)
- okpo: –û–ö–ü–û (–µ—Å–ª–∏ –µ—Å—Ç—å)
- oktmo: –û–ö–¢–ú–û (–µ—Å–ª–∏ –µ—Å—Ç—å)
- okato: –û–ö–ê–¢–û (–µ—Å–ª–∏ –µ—Å—Ç—å)
- okfs: –û–ö–§–° (–µ—Å–ª–∏ –µ—Å—Ç—å)
- address: –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å (–≤–∫–ª—é—á–∞—è –∏–Ω–¥–µ–∫—Å, –≤—Å–µ —É–ª–∏—Ü—ã, –¥–æ–º–∞)
- director: –§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (—Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω–æ)
- phone: –≤—Å–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã (—Å –∫–æ–¥–∞–º–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
- email: –≤—Å–µ email –∞–¥—Ä–µ—Å–∞
- bank_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞
- bank_account: —Ä–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç
- korr_account: –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç—Å–∫–∏–π —Å—á–µ—Ç
- bik: –ë–ò–ö –±–∞–Ω–∫–∞
- license: –≤—Å–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
- registration_date: –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
- other: –í–°–Ø –æ—Å—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

üë• –î–õ–Ø –°–ü–ò–°–ö–û–í –õ–Æ–î–ï–ô (–º–µ–¥–æ—Å–º–æ—Ç—Ä—ã, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏, –ø–∞—Ü–∏–µ–Ω—Ç—ã):
–î–ª—è –ö–ê–ñ–î–û–ì–û —á–µ–ª–æ–≤–µ–∫–∞ —Å–æ–∑–¥–∞–π –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç:
- fio: –ø–æ–ª–Ω–æ–µ –§–ò–û (—Ç–æ—á–Ω–æ –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏)
- birth_date: –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)
- age: –≤–æ–∑—Ä–∞—Å—Ç (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
- position: –¥–æ–ª–∂–Ω–æ—Å—Ç—å/–ø—Ä–æ—Ñ–µ—Å—Å–∏—è
- department: –æ—Ç–¥–µ–ª/–ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
- workplace: –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
- address: –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
- phone: —Ç–µ–ª–µ—Ñ–æ–Ω
- passport: –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
- snils: –°–ù–ò–õ–°
- medical_book: –Ω–æ–º–µ—Ä –º–µ–¥–∫–Ω–∏–∂–∫–∏
- harmful_factors: –≤—Ä–µ–¥–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
- diagnosis: –¥–∏–∞–≥–Ω–æ–∑—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
- recommendations: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- exam_date: –¥–∞—Ç–∞ –æ—Å–º–æ—Ç—Ä–∞
- next_exam: –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Å–º–æ—Ç—Ä–∞
- other: –í–°–Ø –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

üîí –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê:
1. –ò–ó–í–õ–ï–ö–ê–ô –ö–ê–ñ–î–£–Æ –ó–ê–ü–ò–°–¨ - –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
2. –¢–û–ß–ù–û–°–¢–¨ –ò–ú–ï–ù - —Å–æ—Ö—Ä–∞–Ω—è–π –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, —Ä–µ–≥–∏—Å—Ç—Ä, –ø—Ä–æ–±–µ–ª—ã –≤ –∏–º–µ–Ω–∞—Ö
3. –ü–û–õ–ù–´–ï –ß–ò–°–õ–ê - –≤—Å–µ –∫–æ–¥—ã, –Ω–æ–º–µ—Ä–∞, –¥–∞—Ç—ã —Ü–µ–ª–∏–∫–æ–º
4. –ù–ï –ò–°–ü–†–ê–í–õ–Ø–ô –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é –≤ –∏–º–µ–Ω–∞—Ö –∏ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
5. –ù–ï –ü–ï–†–ï–í–û–î–ò –Ω–∞ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏
6. –°–û–•–†–ê–ù–Ø–ô –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç –∏ –Ω–æ–º–µ—Ä–æ–≤

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ JSON –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤. –ï—Å–ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ 10 –∑–∞–ø–∏—Å–µ–π - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 10 –æ–±—ä–µ–∫—Ç–æ–≤. –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–µ—Ä–Ω–∏ []."""
                            }
                        ]
                    }
                ],
                temperature=0
            ) as stream:
                json_result = ""
                for text in stream.text_stream:
                    json_result += text
            
            import json
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç
                result = json.loads(json_result.strip())
                if isinstance(result, list):
                    return result
            except json.JSONDecodeError:
                logger.warning("Claude –≤–µ—Ä–Ω—É–ª –Ω–µ JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–∞–±–ª–∏—Ü")
            
            return []
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü Claude API: {e}")
            return []
    
    def process_pdf_images(self, pdf_path: str) -> Dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç PDF —Ñ–∞–π–ª –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                # –ü—Ä–æ–±—É–µ–º —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º –ø—É—Ç–µ–º
                if USE_POPPLER_PATH:
                    images = convert_from_path(pdf_path, poppler_path=USE_POPPLER_PATH)
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π poppler
                    images = convert_from_path(pdf_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF —Å poppler_path={USE_POPPLER_PATH}: {e}")
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                try:
                    # –ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—É—Ç–∏
                    images = convert_from_path(pdf_path)
                except Exception as e2:
                    logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF –±–µ–∑ –ø—É—Ç–∏: {e2}")
                    # –ü—Ä–æ–±—É–µ–º —Å —è–≤–Ω—ã–º –ø—É—Ç–µ–º –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–º—É poppler
                    try:
                        images = convert_from_path(pdf_path, poppler_path="/usr/bin")
                    except Exception as e3:
                        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ PDF —Å /usr/bin: {e3}")
                        return {
                            'success': False,
                            'text': '',
                            'pages': 0,
                            'tables': [],
                            'method': 'None',
                            'error': f'–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e3}'
                        }
            
            all_text = ""
            all_tables = []
            method_used = "None"
            
            for i, image in enumerate(images):
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {i+1}/{len(images)}")
                
                # –ü—Ä–æ–±—É–µ–º Claude API —Å–Ω–∞—á–∞–ª–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                if self.claude_client:
                    claude_text = self.extract_text_with_claude(image)
                    if claude_text:
                        all_text += f"\n\n--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} ---\n{claude_text}"
                        method_used = "Claude API"
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
                        tables = self.extract_tables_with_claude(image)
                        all_tables.extend(tables)
                        continue
                
                # Fallback –Ω–∞ Tesseract OCR (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                if self.tesseract_available:
                    tesseract_text = self.extract_text_with_tesseract(image)
                    if tesseract_text:
                        all_text += f"\n\n--- –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i+1} ---\n{tesseract_text}"
                        method_used = "Tesseract OCR"
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ Claude, –Ω–∏ Tesseract
                    if not self.claude_client:
                        return {
                            'success': False,
                            'text': '',
                            'pages': len(images),
                            'tables': [],
                            'method': 'None',
                            'error': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Claude API –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Tesseract.'
                        }
            
            return {
                'success': True,
                'text': all_text.strip(),
                'pages': len(images),
                'tables': all_tables,
                'method': method_used,
                'error': None
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
            return {
                'success': False,
                'text': '',
                'pages': 0,
                'tables': [],
                'method': 'None',
                'error': str(e)
            }
    
    def process_pdf_direct_claude(self, pdf_path: str) -> Dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç PDF —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Claude API (–±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        –≠—Ç–æ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∏ —Ç–æ—á–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF
        """
        if not self.claude_client:
            return {
                'success': False,
                'text': '',
                'pages': 0,
                'tables': [],
                'method': 'None',
                'error': 'Claude API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            }
        
        try:
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é PDF –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Claude API: {pdf_path}")
            
            # –ß–∏—Ç–∞–µ–º PDF —Ñ–∞–π–ª –≤ base64
            with open(pdf_path, 'rb') as pdf_file:
                pdf_data = base64.b64encode(pdf_file.read()).decode('utf-8')
            
            # –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF
            logger.info("–≠—Ç–∞–ø 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF")
            with self.claude_client.messages.stream(
                model="claude-sonnet-4-20250514",
                max_tokens=64000,
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "document",
                                "source": {
                                    "type": "base64",
                                    "media_type": "application/pdf",
                                    "data": pdf_data
                                }
                            },
                            {
                                "type": "text",
                                "text": """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫ –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç PDF —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∏ –ê–ë–°–û–õ–Æ–¢–ù–û –í–°–ï –¥–∞–Ω–Ω—ã–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é.

üéØ –ó–ê–î–ê–ß–ê: –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö

üìã –ü–ï–†–í–ò–ß–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï:
- –ò–∑–≤–ª–µ–∫–∏ –ö–ê–ñ–î–û–ï —Å–ª–æ–≤–æ, —Ü–∏—Ñ—Ä—É, –¥–∞—Ç—É –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞
- –°–æ—Ö—Ä–∞–Ω—è–π –¢–û–ß–ù–£–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –í–∫–ª—é—á–∞–π –∑–∞–≥–æ–ª–æ–≤–∫–∏, –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ç–∞–±–ª–∏—Ü—ã, —Å–ø–∏—Å–∫–∏
- –ù–ï –ø—Ä–æ–ø—É—Å–∫–∞–π –º–µ–ª–∫–∏–π —Ç–µ–∫—Å—Ç, —Å–Ω–æ—Å–∫–∏, –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
- –ò–∑–≤–ª–µ–∫–∞–π –ø–µ—á–∞—Ç–∏, –ø–æ–¥–ø–∏—Å–∏, —à—Ç–∞–º–ø—ã (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç)

üîí –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ò–ú–ï–ù–ê –ò –î–ê–ù–ù–´–ï:
- –í—Å–µ –∏–º–µ–Ω–∞, —Ñ–∞–º–∏–ª–∏–∏, –æ—Ç—á–µ—Å—Ç–≤–∞ –¢–û–ß–ù–û –∫–∞–∫ –Ω–∞–ø–∏—Å–∞–Ω–æ
- –ù–ï –∏—Å–ø—Ä–∞–≤–ª—è–π –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –ù–ï –ø–µ—Ä–µ–≤–æ–¥–∏ –∏–º–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏
- –°–æ—Ö—Ä–∞–Ω—è–π –í–°–ï —Å–∏–º–≤–æ–ª—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –≤ –∏–º–µ–Ω–∞—Ö
- –°–æ—Ö—Ä–∞–Ω—è–π —Ç–æ—á–Ω—ã–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–µ–π

üìä –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï:
–ï—Å–ª–∏ –≤–∏–¥–∏—à—å —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Å–ø–∏—Å–∫–∏ –¥–∞–Ω–Ω—ã—Ö - –∏–∑–≤–ª–µ–∫–∞–π –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ:
- –§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤/–ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
- –î–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è, –≤–æ–∑—Ä–∞—Å—Ç
- –î–æ–ª–∂–Ω–æ—Å—Ç–∏, –æ—Ç–¥–µ–ª—ã, –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã
- –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –¥–∏–∞–≥–Ω–æ–∑—ã
- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ò–ù–ù, –ö–ü–ü, –∞–¥—Ä–µ—Å–∞)
- –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Ç–µ–ª–µ—Ñ–æ–Ω—ã, email
- –ù–æ–º–µ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –ª–∏—Ü–µ–Ω–∑–∏–π, —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤

üéØ –§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–í–µ—Ä–Ω–∏ –í–ï–°–¨ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.
–ù–ï –¥–æ–±–∞–≤–ª—è–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–ª–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è.
–¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ PDF."""
                            }
                        ]
                    }
                ],
                temperature=0
            ) as stream:
                extracted_text = ""
                for text in stream.text_stream:
                    extracted_text += text
            
            if not extracted_text.strip():
                return {
                    'success': False,
                    'text': '',
                    'pages': 1,
                    'tables': [],
                    'method': 'Claude Direct PDF',
                    'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF'
                }
            
            # –í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏–º–µ–Ω –∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.info("–≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –∏–º–µ–Ω –∏ –¥–∞–Ω–Ω—ã—Ö")
            with self.claude_client.messages.stream(
                model="claude-sonnet-4-20250514",
                max_tokens=64000,
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "document",
                                "source": {
                                    "type": "base64",
                                    "media_type": "application/pdf",
                                    "data": pdf_data
                                }
                            },
                            {
                                "type": "text",
                                "text": f"""–¢—ã - –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ PDF —Ç–µ–∫—Å—Ç. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ü–†–û–í–ï–†–ò–¢–¨ –∏ –ò–°–ü–†–ê–í–ò–¢–¨ —Ç–æ–ª—å–∫–æ —è–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤—Å–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏–º–µ–Ω.

–ò–ó–í–õ–ï–ß–ï–ù–ù–´–ô –¢–ï–ö–°–¢:
{extracted_text}

üîç –ó–ê–î–ê–ß–ê –ü–†–û–í–ï–†–ö–ò:
1. –ü—Ä–æ–≤–µ—Ä—å –ø–æ –∏—Å—Ö–æ–¥–Ω–æ–º—É PDF –≤—Å–µ –∏–º–µ–Ω–∞, —Ñ–∞–º–∏–ª–∏–∏, –æ—Ç—á–µ—Å—Ç–≤–∞
2. –£–±–µ–¥–∏—Å—å —á—Ç–æ –ù–ò –û–î–ù–û –∏–º—è –Ω–µ –ø–æ—Ç–µ—Ä—è–Ω–æ –∏–ª–∏ –∏—Å–∫–∞–∂–µ–Ω–æ
3. –ò—Å–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ –û–ß–ï–í–ò–î–ù–´–ï –æ—à–∏–±–∫–∏ OCR (–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
4. –ù–ï –∏—Å–ø—Ä–∞–≤–ª—è–π –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—é - —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ê–í–ò–õ–ê:
- –ó–ê–ü–†–ï–©–ï–ù–û –º–µ–Ω—è—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–Ω (–¥–∞–∂–µ –µ—Å–ª–∏ –∫–∞–∂–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º)
- –ó–ê–ü–†–ï–©–ï–ù–û –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∏–º–µ–Ω–∞ –Ω–∞ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏
- –ó–ê–ü–†–ï–©–ï–ù–û "–∏—Å–ø—Ä–∞–≤–ª—è—Ç—å" —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–ª–∏ –Ω–µ–æ–±—ã—á–Ω—ã–µ –∏–º–µ–Ω–∞
- –ò—Å–ø—Ä–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: 0‚Üí–û, 1‚ÜíI, –∏ —Ç.–¥.

üéØ –í–ï–†–ù–ò:
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –í–°–ï–• –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω –∏ –¥–∞–Ω–Ω—ã—Ö.
–¢–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è."""
                            }
                        ]
                    }
                ],
                temperature=0
            ) as stream:
                verified_text = ""
                for text in stream.text_stream:
                    verified_text += text
            
            # –¢—Ä–µ—Ç–∏–π —ç—Ç–∞–ø: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Excel
            logger.info("–≠—Ç–∞–ø 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            with self.claude_client.messages.stream(
                model="claude-sonnet-4-20250514",
                max_tokens=64000,
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": f"""–ò–∑ —ç—Ç–æ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑–≤–ª–µ–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:

–¢–ï–ö–°–¢ –î–û–ö–£–ú–ï–ù–¢–ê:
{verified_text}

üîç –ê–ù–ê–õ–ò–ó –ò –°–¢–†–£–ö–¢–£–†–ò–ó–ê–¶–ò–Ø:
–û–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∏ –í–°–ï —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.

üìã –î–õ–Ø –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ô (–∫–∞—Ä—Ç—ã, —Å–ø—Ä–∞–≤–∫–∏, —Ä–µ–∫–≤–∏–∑–∏—Ç—ã):
–î–ª—è –ö–ê–ñ–î–û–ô –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–π –æ–±—ä–µ–∫—Ç:
{{
    "organization_name": "–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ",
    "inn": "–ò–ù–ù", "kpp": "–ö–ü–ü", "ogrn": "–û–ì–†–ù",
    "address": "–ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å", "director": "–§–ò–û —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è",
    "phone": "—Ç–µ–ª–µ—Ñ–æ–Ω", "email": "email", "bank_name": "–±–∞–Ω–∫",
    "bank_account": "—Ä/—Å", "korr_account": "–∫/—Å", "bik": "–ë–ò–ö"
}}

üë• –î–õ–Ø –°–ü–ò–°–ö–û–í –õ–Æ–î–ï–ô (–º–µ–¥–æ—Å–º–æ—Ç—Ä—ã, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏):
–î–ª—è –ö–ê–ñ–î–û–ì–û —á–µ–ª–æ–≤–µ–∫–∞ —Å–æ–∑–¥–∞–π –æ–±—ä–µ–∫—Ç:
{{
    "fio": "–ø–æ–ª–Ω–æ–µ –§–ò–û", "birth_date": "–¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "age": "–≤–æ–∑—Ä–∞—Å—Ç",
    "position": "–¥–æ–ª–∂–Ω–æ—Å—Ç—å", "department": "–æ—Ç–¥–µ–ª", "workplace": "–º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã",
    "address": "–∞–¥—Ä–µ—Å", "phone": "—Ç–µ–ª–µ—Ñ–æ–Ω", "medical_book": "–º–µ–¥.–∫–Ω–∏–∂–∫–∞",
    "harmful_factors": "–≤—Ä–µ–¥–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã", "exam_date": "–¥–∞—Ç–∞ –æ—Å–º–æ—Ç—Ä–∞"
}}

üîí –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ö–ê–ñ–î–£–Æ –∑–∞–ø–∏—Å—å –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ - –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
- –ò–º–µ–Ω–∞ –¢–û–ß–ù–û –∫–∞–∫ –≤ —Ç–µ–∫—Å—Ç–µ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
- –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ - –æ—Å—Ç–∞–≤—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É ""
- –í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ []

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤–∏–¥–∏—à—å 10 —á–µ–ª–æ–≤–µ–∫ –≤ —Å–ø–∏—Å–∫–µ - –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 10 –æ–±—ä–µ–∫—Ç–æ–≤!"""
                            }
                        ]
                    }
                ],
                temperature=0
            ) as stream:
                json_data = ""
                for text in stream.text_stream:
                    json_data += text
            
            # –ü–∞—Ä—Å–∏–º JSON –¥–∞–Ω–Ω—ã–µ
            structured_data = []
            try:
                import json
                structured_data = json.loads(json_data.strip())
                if not isinstance(structured_data, list):
                    structured_data = []
            except json.JSONDecodeError as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –¥–∞–Ω–Ω—ã–µ: {e}")
                structured_data = []
            
            logger.info(f"PDF –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Claude: —Ç–µ–∫—Å—Ç={len(verified_text)} —Å–∏–º–≤–æ–ª–æ–≤, –∑–∞–ø–∏—Å–µ–π={len(structured_data)}")
            
            return {
                'success': True,
                'text': verified_text.strip(),
                'pages': 1,  # Claude –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Å—å PDF –∫–∞–∫ –µ–¥–∏–Ω–æ–µ —Ü–µ–ª–æ–µ
                'tables': structured_data,
                'method': 'Claude Direct PDF (3-stage)',
                'error': None
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —á–µ—Ä–µ–∑ Claude: {e}")
            return {
                'success': False,
                'text': '',
                'pages': 0,
                'tables': [],
                'method': 'Claude Direct PDF',
                'error': str(e)
            } 